
* Talon Script

#+BEGIN_QUOTE
#everything above the dash (-) is a very basic markup language
- 
The right side of the colon is a markup language : "the left side of the colon and everything indented is TalonScript"
voice command defined in talonscript only <some_capture_defined_in_python> {some_list_defined_in_python}:
    call_action() # call an action that was built-in or defined by a user
    print(some_caputure_defined_in_python) # use the captured <some_capture_defined_in_python> as a variable
    print(some_capture_defined_in_python or '') # do null coalescing if phrase is optional and was not provided
    user.long_action_defined_in_python(1, 2, 3, 4) # call a longer action with parameters
    a = anything # assign a variable
    b = 1 + 2 # do math (limited to a single operator per expression)
    print("{b} do some string interpolation")
#+END_QUOTE
* COMMENT Pop Action
:PROPERTIES:
:header-args: :tangle no
:END:

** COMMENT Pop
+ From https://gist.github.com/rntz/e4be7a42287266f3a36bb8f50bc30ab6#file-noise-py
+ Controls what happens on =pop= (when Tobii not turned on?)

#+BEGIN_SRC talon
# talon pop <user.text>: user.pop_store(text or "")
pop that: user.pop_phrase()
#+END_SRC

From @rntz

This is cool and if it works for you you should keep it, but at first glance I don't think it would work for me. (1) iiuc, this captures entire phrases, not single commands. So if I chain commands together and end with one I want to repeat, it will repeat the whole phrase including the part I didn't want.  Eg. Your example "go down third" would make popping go down three times; with my version popping would only go down once. This is a matter of what you're used to, I think... Either behaviour is sensible.

(2) what if the quick action isn't a repeat? Eg. "Go top search word hello" is three separate commands: go top, search, word hello. But after saying that, the action I actually want popping to do is none of those: it's edit.find_next. in some contexts that can be done by repeating the command "search" or "search word hello" but in other environments that will do something different... The edit.find_next action is the thing I really always want.

The simplest thing that might be useful is to wire up popping to just repeat the last command or phrase.

#+BEGIN_SRC python
from talon import Module, Context, app, speech_system, actions, noise

ctx = Context()
mod = Module()

last_phrase = ""
pop_phrase = ""

auto_pop_that_phrases = ["go", "scroll", "delete", "clear"]

def on_phrase(j):
    """Record the last phrase"""
    phrase = getattr(j["parsed"], "_unmapped", j["phrase"])
    phrase = " ".join(word.split("\\")[0] for word in phrase)
    global last_phrase
    last_phrase = phrase
    print(f'*** Storing last phrase: {last_phrase} ***')
    # auto-set pop_phrase if the last phrase is in the auto_pop_that_phrases list

    global auto_pop_that_phrases
    for p in auto_pop_that_phrases:
        if phrase[0:len(p)] == p:
            global pop_phrase
            pop_phrase = phrase

speech_system.register('post:phrase', on_phrase)

@mod.action_class
class Actions:
    def pop_phrase():
        """Set pop command to the last phrase"""
        global last_phrase
        global pop_phrase
        pop_phrase = last_phrase
        print(f'*** Setting pop phrase: {pop_phrase} ***')

def on_pop(active):
    global pop_phrase
    actions.mimic(pop_phrase) 

noise.register("pop", on_pop)
                       
#+END_SRC

** COMMENT Actions

+ https://gist.github.com/rntz/e4be7a42287266f3a36bb8f50bc30ab6#file-gistfile1-txt

#+BEGIN_SRC python
from talon import Context, Module, actions, noise, ui
from typing import Callable, Union
import logging

mod = Module()
ctx = Context()

quick_action = None

@mod.action_class
class Actions:
    def quick_action_clear():
        """Clears the quick action"""
        global quick_action
        # logging.info("== Quick action cleared ==")
        quick_action = None

    def quick_action_set(action: str):
        """Sets the quick action"""
        global quick_action
        logging.info(f"== Quick action set to {action!r} ==")
        quick_action = action

    def quick_action_run():
        """Runs the quick action"""
        logging.info("== Quick action invoked ==")
        if not quick_action:
            logging.info("== Quick action invoked, but no quick action assigned ==")
            return

        # I should find a better way to do this. Frequently I simply want to set
        # the quick action to "repeat this command" (not "repeat last command",
        # repeat _this_ command). There's probably a way to do this with
        # actions.mimic() or similar.
        action = quick_action
        if action == "core.repeat_command":
            actions.core.repeat_command(1)
        elif action == "edit.find_next":
            actions.edit.find_next()
        elif action == "edit.find_previous":
            actions.edit.find_previous()
        # emacs.talon probably
        elif action == "key(alt-y)":
            actions.key("alt-y")
        # emacs-slow.talon, `before/after next/previous <user.char>`
        elif action == "key(ctrl-s ctrl-s enter)":
            actions.key("ctrl-s ctrl-s enter")
        elif action == "key(ctrl-r ctrl-r enter)":
            actions.key("ctrl-r ctrl-r enter")
        elif action == "key(right ctrl-s ctrl-s left)":
            actions.key("right ctrl-s ctrl-s left")
        elif action == "key(left ctrl-r ctrl-r right)":
            actions.key("left ctrl-r ctrl-r right")
        # TODO: where are these from?
        elif action == "key(ctrl-u ctrl-space)":
            actions.key("ctrl-u ctrl-space")
        elif action == "key(ctrl-x ctrl-@)":
            actions.key("ctrl-x ctrl-@")
        elif action == "key(ctrl-x e)":
            actions.key("ctrl-x e")
        else:
            logging.info(f"== Unknown quick action: {action!r} ==")

ui.register("app_deactivate", lambda app: actions.user.quick_action_clear())
ui.register("win_focus", lambda win: actions.user.quick_action_clear())

@ctx.action_class("user")
class NoiseActions:
    def pop():
        actions.user.quick_action_run()
#+END_SRC




* Overriding Knausj


syno instead of using mimic you can use an artificial tag that you require in all your own files. because most specific command definitions get used, your stuff will be prefered to knausj wherever you defined it. So just define the tag privateStuff or something, that is always on. then add it to the top of your own files. (edited) 
white_check_mark
heart
thumbsup::skin-tone-5





15:46
Gorthaur yeah technical debt until a model can be trained to my way of speaking. I will have a look at the tag thank you
17:21
mankoff @syno can you clarify how to force/know that my vocab gets precedence over knausj?
New
23:57
syno yes. outside of knausj, create a new file and add:
-
tag(): user.private
this means this tag is always on.
now in all of your own files (the ones you want to override knausj), add
tag: user.private
to the list of requirements on top of the file (above the dash).
23:59
because they require an additional tag in comparison to their knausj counterparts, they will overwrite them, if settings, rules etc occur in both.
This is because the most specific ruleset always gets selected, even though the tag that causes this is always active. (edited) 
:+1::skin-tone-5:
1

00:00
syno oh and I think you need to have python file containing the following
mod = Module()
tagList = [
    "private",
]
for entry in tagList:
    mod.tag(entry, f"tag to load {entry} and/or related plugins ")
because tags need to be specified before they can be set.
00:00
if you want to have the same behaviour in python instead of talon files, you can also set the tag through code:
ctx = Context()
ctx.matches = 'tag: user.private'

* Hold modifiers

Kim Taylor Today at 07:21
|Quick question, is there a way I can hold down modifier keys while I perform a click and drag? For example option clicking and dragging file to duplicate, or or proportionally scaling an image by holding on shift




2 replies
knausj  37 minutes ago
shift hold: key(shift:down)
shift release: key(shift:up)
there's nothing built-in to my repository the moment, but you could do something like the above
knausj  33 minutes ago
you could also extend to all modifiers if you wish
<user.modifiers> hold: key("{modifiers}:down")
<user.modifiers> release: key("{modifiers}:up")

* Select text

sunnylan Hi, new to Talon. If I'm in Chrome for example and I want to select part of a page, is there any way to go about this?
10:33
tararoys 
Position the mouse with Whatever you were using for a mouse.  Eye tracker, voice commands which ever.  (Mouse grid is the built-in one, although you have to turn it on)
Click by using the voice command touch
Reposition the mouse
Say the voice command “shift touch”


* Talon sentence babble

#+BEGIN_SRC python :results output :python ${HOME}/.talon/bin/repl
from talon import registry
from user.knausj_talon.code import help

import re

active_contexts = registry.active_contexts()
help.update_active_contexts_cache(active_contexts)

for context_name, context in registry.contexts.items():
    if context_name != 'user.talon.emacs.mu4e.talon': continue
    for command_alias, val in context.commands.items():
        if val.rule.rule != 'reply': continue
        #print(command_alias, val)
        #     print(str(val))
        #     print(str(val.rule))
        print(str(val.rule.rule) + ": " + val.target.code)
        x = val.rule.parse
        dir(x)
        print(x.__str__())


    # if command_alias in registry.commands:
        #     print(str(val.rule.rule) + ": " + val.target.code)
            # context_command_map[context_name][
            #     str(val.rule.rule)
            # ] = val.target.code

    # print("DIR", dir(c))
    # print(c.items)
    # # c()

print("")
#+END_SRC

#+RESULTS:
: Talon REPL | Python 3.9.2 (default, Feb 20 2021, 08:57:16) [GCC 7.5.0] on linux)
: reply: key(R)
: ['__call__', '__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__func__', '__ge__', '__get__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__self__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__']
: <method-wrapper '__str__' of method object at 0x7f8e67585b00>
: 

#+BEGIN_SRC python :results output :python ${HOME}/.talon/bin/repl
from talon import Module, Context, actions, imgui, Module, registry, ui, app

from user.knausj_talon.code.help import *

from collections import defaultdict
import itertools
import math
from typing import Dict, List, Iterable, Set, Tuple, Union

from talon import Module, Context, actions, imgui, Module, registry, ui, app
from talon.grammar import Phrase

mod = Module()
mod.list("help_contexts", desc="list of available contexts")
mod.mode("help", "mode for commands that are available only when help is visible")
setting_help_max_contexts_per_page = mod.setting(
    "help_max_contexts_per_page",
    type=int,
    default=20,
    desc="Max contexts to display per page in help",
)
setting_help_max_command_lines_per_page = mod.setting(
    "help_max_command_lines_per_page",
    type=int,
    default=50,
    desc="Max lines of command to display per page in help",
)

ctx = Context()
# context name -> commands
context_command_map = {}

# rule word -> Set[(context name, rule)]
rule_word_map: Dict[str, Set[Tuple[str, str]]] = defaultdict(set)
search_phrase = None

# context name -> actual context
context_map = {}

current_context_page = 1
sorted_context_map_keys = []

selected_context = None
selected_context_page = 1

total_page_count = 1

cached_active_contexts_list = []

live_update = True
cached_window_title = None
show_enabled_contexts_only = False

enabled_only = True

reset()
search_phrase = "browser"
# refresh_context_command_map()
gui_alphabet.hide()
# # gui_context_help.show()
register_events(True)
actions.mode.enable("user.help")


global rule_word_map
global context_command_map
global context_map
global sorted_context_map_keys
global show_enabled_contexts_only
global cached_window_title
global context_map

context_map = {}
cached_short_context_names = {}
show_enabled_contexts_only = enabled_only
cached_window_title = ui.active_window().title
active_contexts = registry.active_contexts()
# print(str(active_contexts))
update_active_contexts_cache(active_contexts)

context_command_map = {}
for context_name, context in registry.contexts.items():
    splits = context_name.split(".")
    index = -1
    if "talon" in splits[index]:
        index = -2
        short_name = splits[index].replace("_", " ")
    else:
        short_name = splits[index].replace("_", " ")
    if "mac" == short_name or "win" == short_name or "linux" == short_name:
        index = index - 1
        short_name = splits[index].replace("_", " ")
    # print("short name: " + short_name)
    if short_name in overrides:
        short_name = overrides[short_name]
    if enabled_only and context in active_contexts or not enabled_only:
        print(short_name)
        context_command_map[context_name] = {}
        for command_alias, val in context.commands.items():
            # print(str(val))
            if command_alias in registry.commands:
                # print(str(val.rule.rule) + ": " + val.target.code)
                context_command_map[context_name][
                    str(val.rule.rule)
                ] = val.target.code
        # print(short_name)
        # print("length: " + str(len(context_command_map[context_name])))
        if len(context_command_map[context_name]) == 0:
            context_command_map.pop(context_name)
        else:
            cached_short_context_names[short_name] = context_name
            context_map[context_name] = context

refresh_rule_word_map(context_command_map)

ctx.lists["self.help_contexts"] = cached_short_context_names
# print(str(ctx.lists["self.help_contexts"]))
sorted_context_map_keys = sorted(cached_short_context_names)


#+END_SRC
#+RESULTS:
#+begin_example
Talon REPL | Python 3.9.2 (default, Feb 20 2021, 08:57:16) [GCC 7.5.0] on linux)
NameDecl("repl.help_contexts", "list of available contexts")
NameDecl("repl.help", "mode for commands that are available only when help is visible")
main
{}
record
{}
speech
{}
engines
{}
1password global
dunst
app
{}
edit
{}
abbreviate
{}
code
{}
edit
{}
file manager
{}
formatters
{}
homophones
{}
keys
{}
numbers
{}
ordinals
{}
switcher
{}
user settings
{}
vocabulary
{}
window snap
{}
comment
operators
programming
python
{}
python
vimscript
{}
abbreviate
extensions
formatters
help
help open
history
keys
macro
media
microphone selection
mouse
repeater
screenshot
standard
talon helpers
toggles
{}
window management
word selection
language modes
modes
mouse grid
{}
settings
{}
generic editor
homophones
numbers
symbols
general
{}
general
python
{}
python
global
momentary command
plasma kde
talon commands
quick macro
{}
org
repl
{}
help
{}
#+end_example

